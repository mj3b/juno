# JUNO Cloud Jira Deployment Configuration
# Docker Compose for Cloud-Optimized JUNO Deployment

version: '3.8'

services:
  juno-cloud-app:
    build:
      context: .
      dockerfile: Dockerfile.cloud
    container_name: juno-cloud-app
    environment:
      # Cloud Jira Configuration
      - JIRA_BASE_URL=${JIRA_BASE_URL}
      - JIRA_EMAIL=${JIRA_EMAIL}
      - JIRA_API_TOKEN=${JIRA_API_TOKEN}
      - JIRA_CLOUD_OPTIMIZATIONS=true
      - JIRA_API_VERSION=3
      - JIRA_RATE_LIMIT_BUFFER=0.8
      - JIRA_CACHE_STRATEGY=intelligent
      
      # OpenAI Enterprise Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_ORG_ID=${OPENAI_ORG_ID}
      - OPENAI_PROJECT_ID=${OPENAI_PROJECT_ID}
      - OPENAI_MODEL=gpt-4
      - CLOUD_JIRA_GPT_OPTIMIZATIONS=true
      
      # Cloud Performance Settings
      - CLOUD_BATCH_SIZE=100
      - CLOUD_CONNECTION_POOL_SIZE=10
      - CLOUD_ASYNC_WORKERS=8
      - CLOUD_INTELLIGENT_CACHING=true
      
      # Security Configuration
      - DATA_CLASSIFICATION_ENABLED=true
      - PII_DETECTION_ENABLED=true
      - AUDIT_LOGGING=comprehensive
      - ENCRYPTION_AT_REST=true
      
      # Database Configuration
      - DATABASE_URL=postgresql://juno:${POSTGRES_PASSWORD}@postgres:5432/juno_cloud
      - REDIS_URL=redis://redis:6379/0
      
      # Flask Configuration
      - FLASK_ENV=production
      - FLASK_SECRET_KEY=${FLASK_SECRET_KEY}
    ports:
      - "5000:5000"
    depends_on:
      - postgres
      - redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    restart: unless-stopped
    networks:
      - juno-cloud-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  postgres:
    image: postgres:15-alpine
    container_name: juno-cloud-postgres
    environment:
      - POSTGRES_DB=juno_cloud
      - POSTGRES_USER=juno
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - juno-cloud-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U juno -d juno_cloud"]
      interval: 30s
      timeout: 10s
      retries: 3

  redis:
    image: redis:7-alpine
    container_name: juno-cloud-redis
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - juno-cloud-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  nginx:
    image: nginx:alpine
    container_name: juno-cloud-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - juno-cloud-app
    restart: unless-stopped
    networks:
      - juno-cloud-network

  prometheus:
    image: prom/prometheus:latest
    container_name: juno-cloud-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - juno-cloud-network

  grafana:
    image: grafana/grafana:latest
    container_name: juno-cloud-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    networks:
      - juno-cloud-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  juno-cloud-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

